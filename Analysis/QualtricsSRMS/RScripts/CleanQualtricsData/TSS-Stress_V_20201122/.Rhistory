(1 | uniqueid),
data = subset(df.interval, question == 0 ), REML=F)
tab_model(model.rr, model.rr.simple,
title = "Rating - Good",
dv.labels = c('Rating (Full RE)','Rating (Simple)'),
show.re.var = TRUE, show.stat=TRUE, show.icc=FALSE)
model.rr<-lmer(formula = rating ~ scale_meanAcc * catDiffLevel * reached +
scaledMeanCong + scaledIntervalSessionNum + scaledIntervalBlockNum +
(1 + scale_meanAcc + catDiffLevel + reached| uniqueid),
data = subset(df.interval, question == 1), REML=F)
model.rr.simple<-lmer(formula = rating ~ scale_meanAcc * catDiffLevel * reached +
scaledMeanCong + scaledIntervalSessionNum + scaledIntervalBlockNum +
(1 | uniqueid),
data = subset(df.interval, question == 1 ), REML=F)
tab_model(model.rr, model.rr.simple,
title = "Rating - Stress",
dv.labels = c('Rating (Full RE)','Rating (Simple)'),
show.re.var = TRUE, show.stat=TRUE, show.icc=FALSE)
model.rr<-lmer(formula = rating ~ scale_meanAcc * catDiffLevel +
scaledMeanCong + scaledIntervalSessionNum + scaledIntervalBlockNum +
(1 + scale_meanAcc + catDiffLevel| uniqueid),
data = subset(df.interval, question == 1 & reached ==1), REML=F)
model.rr.simple<-lmer(formula = rating ~ scale_meanAcc * catDiffLevel +
scaledMeanCong + scaledIntervalSessionNum + scaledIntervalBlockNum +
(1 | uniqueid),
data = subset(df.interval, question == 1 & reached ==1), REML=F)
tab_model(model.rr, model.rr.simple,
title = "Rating - Stress",
dv.labels = c('Rating (Full RE)','Rating (Simple)'),
show.re.var = TRUE, show.stat=TRUE, show.icc=FALSE)
model.rr<-lmer(formula = rating ~ scale_meanAcc * catDiffLevel +
scaledMeanCong + scaledIntervalSessionNum + scaledIntervalBlockNum +
(1 + scale_meanAcc + catDiffLevel| uniqueid),
data = subset(df.interval, question == 0 & reached ==1), REML=F)
model.rr.simple<-lmer(formula = rating ~ scale_meanAcc * catDiffLevel +
scaledMeanCong + scaledIntervalSessionNum + scaledIntervalBlockNum +
(1 | uniqueid),
data = subset(df.interval, question == 0 & reached ==1), REML=F)
tab_model(model.rr, model.rr.simple,
title = "Rating - Good",
dv.labels = c('Rating (Full RE)','Rating (Simple)'),
show.re.var = TRUE, show.stat=TRUE, show.icc=FALSE)
model.rr<-lmer(formula = rating ~ scale_meanAcc * catDiffLevel +
scaledMeanCong + scaledIntervalSessionNum + scaledIntervalBlockNum +
(1 + scale_meanAcc + catDiffLevel| uniqueid),
data = subset(df.interval, question == 1 & reached ==0), REML=F)
model.rr.simple<-lmer(formula = rating ~ scale_meanAcc * catDiffLevel +
scaledMeanCong + scaledIntervalSessionNum + scaledIntervalBlockNum +
(1 | uniqueid),
data = subset(df.interval, question == 1 & reached ==0), REML=F)
tab_model(model.rr, model.rr.simple,
title = "Rating - Stress",
dv.labels = c('Rating (Full RE)','Rating (Simple)'),
show.re.var = TRUE, show.stat=TRUE, show.icc=FALSE)
model.rr<-lmer(formula = rating ~ scale_meanAcc * catDiffLevel +
scaledMeanCong + scaledIntervalSessionNum + scaledIntervalBlockNum +
(1 + scale_meanAcc + catDiffLevel| uniqueid),
data = subset(df.interval, question == 0 & reached ==0), REML=F)
model.rr.simple<-lmer(formula = rating ~ scale_meanAcc * catDiffLevel +
scaledMeanCong + scaledIntervalSessionNum + scaledIntervalBlockNum +
(1 | uniqueid),
data = subset(df.interval, question == 0 & reached ==0), REML=F)
tab_model(model.rr, model.rr.simple,
title = "Rating - Good",
dv.labels = c('Rating (Full RE)','Rating (Simple)'),
show.re.var = TRUE, show.stat=TRUE, show.icc=FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(tidyverse)
library(knitr)
library(rmarkdown)
library(summarytools)
library(psych)
library(PCAmixdata)
library(corrplot)
library(rstudioapi)
library(lme4)
library(sjPlot)
library(RColorBrewer)
library(ggplot2)
source("../RFunctions/normDataWithin.R")
source("../RFunctions/summarySE.R")
source("../RFunctions/summarySEwithinO.R")
# Use this code below to set the directory to the same directly as the Rmd file
# NOTE: that this cannot be uncommented when Knitting, will throw an error
# setwd(dirname(getActiveDocumentContext()$path))
date<-'2021-02-22'
# date1<-'2021-01-31'
# date2<-'2021-02-04'
# date3<-'2021-02-22'
Version="TSS-Stress_20210125"
path.TaskData<-paste0('../../Data/Task/',date,'/')
# path.TaskData1<-paste0('../../Data/Task/',date1,'/')
# path.TaskData2<-paste0('../../Data/Task/',date2,'/')
# path.TaskData3<-paste0('../../Data/Task/',date3,'/')
path.SRMData<-"../../Data/QualtricsSRMS/TSS-Stress_20210125/CleanedData/TSS-Stress_SRMS_Clean_Version_TSS-Stress_20210125_Date_2021-03-09.csv"
#path.DebriefData<-"../../Data/QualtricsSRMS/TSS-Stress_20201122/CleanedData/TSS-Stress_Debrief_Clean_Version_TSS-Stress_20201122_Date_2020-12-02.csv"
# Load in the behavioral data
df.trial<-read.csv(paste0(path.TaskData,'trialdata_rewardTest_',date,'.csv'))
# df.trial1<-read.csv(paste0(path.TaskData1,'trialdata_rewardTest_',date1,'.csv'))
# df.trial2<-read.csv(paste0(path.TaskData2,'trialdata_rewardTest_',date2,'.csv'))
# df.trial3<-read.csv(paste0(path.TaskData3,'trialdata_rewardTest_',date3,'.csv'))
# df.trial<-rbind(df.trial1,df.trial2,df.trial3)
# Load in SRM data
df.SRM<-read.csv(path.SRMData,header=TRUE,na.strings=c("NA"))
#df.Debrief<-read.csv(path.DebriefData,header=TRUE,na.strings=c("NA"))
# Load in performance data
# df.debrief<-read.csv(paste0(path.TaskData,'questiondata_Stress_',date,'.csv'),col.names = c('uniqueid','attribute','value')) %>%
#   spread(attribute,value) %>%
#   select(uniqueid,incorrectC1,incorrectC2,incorrectP1,incorrectP2) %>%
#   mutate_at(vars(incorrectC1:incorrectP2),as.character) %>%
#   mutate_at(vars(incorrectC1:incorrectP2),as.numeric) %>%
#   filter(incorrectC1<10 & incorrectC2 < 10 & incorrectP1 < 10 & incorrectP2 < 10)
#df.Error<-read.csv(ErrorLogPath)
# Subjects to exclude
sub.trials<-data.frame(table(df.trial$uniqueid))
sub.exclude<-c("5ec3bab467509821fd35041c") # Exclude for SRMS & Debrief (already excluded for data)
df.SRM <- df.SRM %>%
dplyr::filter(!SubID %in% sub.exclude)
df.trialTest <- df.trial %>%
separate(col = uniqueid, sep = ":", c("PROLIFIC_PID","Version"), remove = FALSE) %>%
#dplyr::filter(!uniqueid %in% sub.exclude) %>%
filter(!is.na(rt)) %>%
select(-c('initrt','phase','moneyEarned','platform','word','color')) %>%
filter(Version=="TSS-Stress_20210125")
# Create vector of trial number for each subject's session
tmp.trialdata<-df.trialTest %>% group_by(uniqueid) %>% dplyr::summarise(numtrials=n())
for (t in 1:dim(tmp.trialdata)[1]) {
Trials = seq(1,tmp.trialdata$numtrials[t])
if (t==1) {
TrialSessionNum <- Trials
}  else {
TrialSessionNum <- append(TrialSessionNum,Trials)
}
}
# Create vector of # of corrects so far
tmp.trialdata<-df.trialTest %>% group_by(uniqueid, blockNum, intervalNum) %>%
dplyr::summarise(numtrials=n())
# idOrderList <- c(unique(df.trialTest$uniqueid))
# tmp.trialdata[match(idOrderList, tmp.trialdata$uniqueid),]
tmp.findTrial = count(tmp.trialdata, vars = "uniqueid")
for (t in 1:dim(tmp.trialdata)[1]) { #now in each interval
filteredHit <- df.trialTest %>%
filter(uniqueid == tmp.trialdata$uniqueid[t], blockNum == tmp.trialdata$blockNum[t], intervalNum == tmp.trialdata$intervalNum[t]) %>%
select('hit')
for (s in 1:tmp.trialdata$numtrials[t]) {
sumHit = sum(filteredHit[1:s,])
id = tmp.trialdata$uniqueid[t]
tempBlockNum = tmp.trialdata$blockNum[t]
tempIntNum = tmp.trialdata$intervalNum[t]
if (s == 1) {
sumHitList <- filteredHit[1,]
uniqueidList <- id
blockNumList <- tempBlockNum
intNumList <- tempIntNum
} else {
sumHitList <- append(sumHitList,sumHit)
uniqueidList <- append(uniqueidList,id)
blockNumList <- append(blockNumList,tempBlockNum)
intNumList <- append(intNumList,tempIntNum)
}
}
if (t==1){
totalHit <- sumHitList
uniqueid <- uniqueidList
blockNum <- blockNumList
intervalNum <- intNumList
trialNum <- seq(tmp.trialdata$numtrials[t])
} else {
totalHit <- append(totalHit,sumHitList)
uniqueid <- append(uniqueid, uniqueidList)
blockNum <- append(blockNum, blockNumList)
intervalNum <- append(intervalNum, intNumList)
trialNum <- append(trialNum, seq(tmp.trialdata$numtrials[t]))
}
}
df.totalHit <- data.frame(uniqueid, blockNum, intervalNum, trialNum, totalHit)
# idOrder <- c(unique(df.trialTest$uniqueid))
# df.totalHit %>%
#   slice(match(idOrder, uniqueid))
df.trialTest <- left_join(df.trialTest, df.totalHit)
# Create additional variables
df.trialTest <- df.trialTest %>%
mutate(AccRT=ifelse(hit==1,rt,NaN),
type=droplevels(factor(type)),
congruence=as.numeric(type=='congruent'),
catDiffLevel=relevel(fct_collapse(intervalType,
'easy'=c('LowEasy','HighEasy'),
'hard'=c('LowHard','HighHard')),ref='easy'),
catRewardLevel=relevel(fct_collapse(intervalType,
'High'=c('HighEasy','HighHard'),
'Low'=c('LowEasy','LowHard')),ref='Low'),
#totalHit = totalHit,
threshold=ifelse(catDiffLevel=="easy",5,8),
isReached = ifelse(totalHit>threshold,1,0),
dGoal = abs(totalHit - threshold),
scaledDGoal = scale(dGoal, center = TRUE, scale = TRUE),
#catPenaltyLevel = fct_relevel(catPenaltyLevel, "Low Penalty", "High Penalty"),
IntervalsPerBlock = max(unique(intervalNum)),
IntervalSessionNum = IntervalsPerBlock*(blockNum-1) + intervalNum,
scaledIntervalSessionNum = scale(IntervalSessionNum, center = TRUE,scale = TRUE),
TrialSessionNum = TrialSessionNum,
scaledTrialSessionNum = scale(TrialSessionNum, center = TRUE, scale = TRUE),
scaledIntervalBlockNum = scale(intervalNum, center = TRUE,scale = TRUE),
#scaledIntervalLength = scale(intervalLength, center = TRUE, scale = TRUE),
log10_AccRT=log10(AccRT),
scaled_log10_AccRT=scale(log10_AccRT, center = TRUE, scale = TRUE))
df.trialTest <- df.trialTest %>%
group_by(uniqueid,PROLIFIC_PID, Version,blockNum,intervalNum) %>%
mutate(intervalReached = ifelse(max(totalHit >= threshold),1,0),
hardReached = ifelse(max(totalHit)>=8,1,0))
df.trialTest <- df.trialTest %>% relocate("totalHit", .after = "hit")
df.trialTest <- df.trialTest %>% relocate("isReached", .after = "totalHit")
df.trialTest <- df.trialTest %>% relocate("intervalReached", .after = "isReached")
df.trialTest <- df.trialTest %>% relocate("intervalNum", .after = "blockNum")
df.trialTest <- df.trialTest %>% relocate("trialNum", .after = "intervalNum")
df.trialTest <- df.trialTest %>% relocate("catDiffLevel", .after = "intervalType")
df.trialTest <- df.trialTest %>% relocate("catRewardLevel", .after = "catDiffLevel")
# to verify the order of your factors is Low, High:
# levels(df.trialTest$catRewardLevel)
# levels(df.trialTest$catPenaltyLevel)
# contrast code: Low Reward or Penalty = -1, High Reward or Penalty = -1
contrast.code<-tmp.code<-contr.sum(2)*-1
contrast(df,trialTest$catRewardLevel)<-contr.sum
contrasts(df,trialTest$catRewardLevel)<-contr.sum
contrasts(df,trialTest$catRewardLevel)<-contrast.code
contrasts(df.trialTest$catRewardLevel)<-contrast.code
contrasts(df.trialTest$catDiffLevel)<-contrast.code
contrasts(df.trialTest$catRewardLevel)
df.rating <- df.trial %>%
separate(col = uniqueid, sep = ":", c("PROLIFIC_PID","Version"), remove = FALSE) %>%
#dplyr::filter(!uniqueid %in% sub.exclude) %>%
filter(is.na(hit)) %>%
select('blockNum','intervalNum','intervalType','question','rating','uniqueid',"PROLIFIC_PID","Version") %>%
filter(Version=="TSS-Stress_20210125") %>%
group_by(uniqueid,PROLIFIC_PID, Version,blockNum) %>%
mutate(sd_Rating = sd(rating),
cRating = scale(rating, center = TRUE, scale = TRUE))
tmp.finderror = count(df.rating, vars = "uniqueid")
df.interval <- df.trialTest %>%
group_by(uniqueid,PROLIFIC_PID, Version,blockNum,intervalNum,intervalLength,intervalType,catDiffLevel, catRewardLevel) %>%
dplyr::summarise(mean_Acc=mean(hit,na.rm=T),
sum_Acc=sum(hit,na.rm=T),
mean_AccRT=mean(AccRT,na.rm=T),
mean_RT=mean(rt,na.rm=T),
mean_Congruence=mean(congruence,na.rm=T),
scaledIntervalSessionNum = mean(scaledIntervalSessionNum),
scaledIntervalBlockNum = mean(scaledIntervalBlockNum), .groups="keep") %>% ungroup() %>%
mutate(norm_sum_Acc=(sum_Acc/intervalLength)*1000,
threshold=ifelse(catDiffLevel=="easy",5,8),
reached = ifelse(sum_Acc>=threshold,1,0),
hardGoalReached = ifelse(sum_Acc>=8,1,0),
numExceed = ifelse(reached==1, sum_Acc-threshold,NaN),
#IntervalsPerBlock = max(unique(intervalNum)),
#IntervalSessionNum = IntervalsPerBlock*(blockNum-1) + intervalNum,
#scaledIntervalSessionNum = scale(IntervalSessionNum, center = TRUE,scale = TRUE),
#scaledIntervalBlockNum = scale(intervalNum, center = TRUE,scale = TRUE),
#scaledblockedintervalNum = scale(blockNum, center = TRUE, scale = TRUE),
#scaledIntervalLength = scale(intervalLength, center = TRUE, scale = TRUE),
scaledMeanCong = scale(mean_Congruence, center = TRUE, scale = TRUE),
log10_AccRT=log10(mean_AccRT),
scale_log10_AccRT=scale(log10(mean_AccRT)),
scale_meanAcc = scale(mean_Acc))
df.interval <- df.interval %>%
join(df.rating,by=c('uniqueid',"PROLIFIC_PID","Version",'blockNum','intervalNum','intervalType') ) %>%
filter(abs(scale_log10_AccRT) < 3,mean_Congruence<=0.6, sd_Rating != 0)
df.interval <- df.interval %>%
group_by(uniqueid,PROLIFIC_PID, Version,blockNum) %>%
mutate(prev_reached = lag(reached),
prev_rating = lag(rating),
prev_question = lag(question),
prev_reward = lag(catRewardLevel))
# df.interval <- df.interval %>%
#   mutate(prev_reached = lag(reached))
tmp.avgNumTrials_Completed <- df.interval %>%
group_by(catDiffLevel, catRewardLevel) %>%
summarise (mean_numTrials = mean(sum_Acc))
# for debugging
#tmp<-df.interval %>% filter(uniqueid=="558823c2fdf99b318cb4224b:IAD_20200730")
#catRewardLevel = fct_relevel(catRewardLevel, "Low Reward", "High Reward"),
#catPenaltyLevel = fct_relevel(catPenaltyLevel, "Low Penalty", "High Penalty")
mean(df.interval$sum_Acc[df.interval$catDiffLevel == "easy"])
mean(df.interval$sum_Acc[df.interval$catDiffLevel == "hard"])
mean(df.interval$sum_Acc[df.interval$catRewardLevel == "Low"])
mean(df.interval$sum_Acc[df.interval$catRewardLevel == "High"])
df.rating <- df.trial %>%
separate(col = uniqueid, sep = ":", c("PROLIFIC_PID","Version"), remove = FALSE) %>%
#dplyr::filter(!uniqueid %in% sub.exclude) %>%
filter(is.na(hit)) %>%
select('blockNum','intervalNum','intervalType','question','rating','uniqueid',"PROLIFIC_PID","Version") %>%
filter(Version=="TSS-Stress_20210125") %>%
group_by(uniqueid,PROLIFIC_PID, Version,blockNum) %>%
mutate(sd_Rating = sd(rating),
cRating = scale(rating, center = TRUE, scale = TRUE))
tmp.finderror = count(df.rating, vars = "uniqueid")
df.interval <- df.trialTest %>%
group_by(uniqueid,PROLIFIC_PID, Version,blockNum,intervalNum,intervalLength,intervalType,catDiffLevel, catRewardLevel) %>%
dplyr::summarise(mean_Acc=mean(hit,na.rm=T),
sum_Acc=sum(hit,na.rm=T),
mean_AccRT=mean(AccRT,na.rm=T),
mean_RT=mean(rt,na.rm=T),
mean_Congruence=mean(congruence,na.rm=T),
scaledIntervalSessionNum = mean(scaledIntervalSessionNum),
scaledIntervalBlockNum = mean(scaledIntervalBlockNum), .groups="keep") %>% ungroup() %>%
mutate(norm_sum_Acc=(sum_Acc/intervalLength)*1000,
threshold=ifelse(catDiffLevel=="easy",5,8),
reached = ifelse(sum_Acc>=threshold,1,0),
hardGoalReached = ifelse(sum_Acc>=8,1,0),
numExceed = ifelse(reached==1, sum_Acc-threshold,NaN),
#IntervalsPerBlock = max(unique(intervalNum)),
#IntervalSessionNum = IntervalsPerBlock*(blockNum-1) + intervalNum,
#scaledIntervalSessionNum = scale(IntervalSessionNum, center = TRUE,scale = TRUE),
#scaledIntervalBlockNum = scale(intervalNum, center = TRUE,scale = TRUE),
#scaledblockedintervalNum = scale(blockNum, center = TRUE, scale = TRUE),
#scaledIntervalLength = scale(intervalLength, center = TRUE, scale = TRUE),
scaledMeanCong = scale(mean_Congruence, center = TRUE, scale = TRUE),
log10_AccRT=log10(mean_AccRT),
scale_log10_AccRT=scale(log10(mean_AccRT)),
scale_meanAcc = scale(mean_Acc))
df.interval <- df.interval %>%
join(df.rating,by=c('uniqueid',"PROLIFIC_PID","Version",'blockNum','intervalNum','intervalType') ) %>%
filter(abs(scale_log10_AccRT) < 3,mean_Congruence<=0.6, sd_Rating != 0)
df.interval <- df.interval %>%
group_by(uniqueid,PROLIFIC_PID, Version,blockNum) %>%
mutate(prev_reached = lag(reached),
prev_rating = lag(rating),
prev_question = lag(question),
prev_reward = lag(catRewardLevel))
# df.interval <- df.interval %>%
#   mutate(prev_reached = lag(reached))
tmp.avgNumTrials_Completed <- df.interval %>%
group_by(catDiffLevel, catRewardLevel) %>%
summarise (mean_numTrials = mean(sum_Acc))
# for debugging
#tmp<-df.interval %>% filter(uniqueid=="558823c2fdf99b318cb4224b:IAD_20200730")
#catRewardLevel = fct_relevel(catRewardLevel, "Low Reward", "High Reward"),
#catPenaltyLevel = fct_relevel(catPenaltyLevel, "Low Penalty", "High Penalty")
df.summary <- df.interval %>%
group_by(uniqueid) %>%
dplyr::summarise(mean_Acc_subj=mean(mean_Acc,na.rm=T),
mean_RT_subj=mean(mean_AccRT,na.rm=T),
nInterval=length(mean_Acc), .groups="keep") %>%
filter(mean_Acc_subj>0.6,mean_RT_subj<2000) %>%
ungroup()
df.summaryRating <- df.interval %>%
group_by(uniqueid, catDiffLevel, question) %>%
dplyr::summarise(mean_rating_subj=mean(rating,na.rm=T),
nInterval=length(mean_Acc), .groups="keep") %>%
ungroup()
df.summary.block <-  df.interval %>%
group_by(uniqueid,intervalType,catDiffLevel) %>%
dplyr::summarise(mean_Acc_subj=mean(mean_Acc,na.rm=T),
mean_RT_subj=mean(mean_AccRT,na.rm=T),
nInterval=length(mean_Acc),
mean_norm_sum_Acc = mean(norm_sum_Acc),
numReached = sum(reached),
numNotReached = length(mean_Acc) - sum(reached),
.groups="keep") %>%
filter(mean_Acc_subj>0.7,mean_RT_subj<2000,nInterval>=12) %>% ungroup()
#df.general <- inner_join(df.interval,df.debrief %>% mutate(uniqueid=as.character(uniqueid)),by='uniqueid')
tmp.age <- df.SRM %>%
summarise(mean_age = mean(Dem_Age),
max_age = max(Dem_Age),
min_age = min(Dem_Age),
sd_age = sd(Dem_Age))
tmp.gender <- df.SRM %>%
group_by(Dem_Gender) %>%
summarise(numSubj = length(SubID))
model.rr<-lmer(formula = AccRT ~ catDiffLevel * catRewardLevel * isReached + intervalReached +
scaledTrialSessionNum + scaledIntervalSessionNum + scaledIntervalBlockNum +
(1 + catDiffLevel + catRewardLevel + isReached+ intervalReached| uniqueid),
data = df.trialTest, REML=F)
model.rr.simple<-lmer(formula = AccRT ~ catDiffLevel * catRewardLevel * isReached + intervalReached+
scaledTrialSessionNum + scaledIntervalSessionNum + scaledIntervalBlockNum +
(1 | uniqueid),
data = df.trialTest, REML=F)
tab_model(model.rr, model.rr.simple,
title = "AccRT - Trial Based",
dv.labels = c('AccRT (Full RE)','AccRT (Simple)'),
show.re.var = TRUE, show.stat=TRUE, show.icc=FALSE, show.se = TRUE)
model.rr<-glmer(formula = hit ~ catDiffLevel * catRewardLevel * isReached + intervalReached+
scaledTrialSessionNum + scaledIntervalSessionNum + scaledIntervalBlockNum +
(1 + catDiffLevel + catRewardLevel+ intervalReached| uniqueid),
data = df.trialTest, family = "binomial")
model.rr.simple<-glmer(formula = hit ~ catDiffLevel * catRewardLevel * isReached + intervalReached+
scaledTrialSessionNum + scaledIntervalSessionNum + scaledIntervalBlockNum +
(1 | uniqueid),
data = df.trialTest, family = "binomial")
tab_model(model.rr, model.rr.simple,
title = "Acc - Trial Based",
dv.labels = c('Hit (Full RE)','Hit (Simple)'),
show.re.var = TRUE, show.stat=TRUE, show.icc=FALSE, show.se = TRUE)
model.rr<-lmer(formula = AccRT ~ catDiffLevel * catRewardLevel * isReached + intervalReached +
scaledTrialSessionNum + scaledIntervalSessionNum + scaledIntervalBlockNum +
(1 + catDiffLevel + catRewardLevel + isReached+ intervalReached| uniqueid),
data = df.trialTest, REML=F)
model.rr.simple<-lmer(formula = AccRT ~ catDiffLevel * catRewardLevel * isReached + intervalReached+
scaledTrialSessionNum + scaledIntervalSessionNum + scaledIntervalBlockNum +
(1 | uniqueid),
data = df.trialTest, REML=F)
tab_model(model.rr, model.rr.simple,
title = "AccRT - Trial Based",
dv.labels = c('AccRT (Full RE)','AccRT (Simple)'),
show.re.var = TRUE, show.stat=TRUE, show.icc=FALSE, show.se = TRUE)
model.rr<-lmer(formula = AccRT ~ catDiffLevel * catRewardLevel + intervalReached +
scaledTrialSessionNum + scaledIntervalSessionNum + scaledIntervalBlockNum +
(1 + catDiffLevel + catRewardLevel + intervalReached| uniqueid),
data = subset(df.trialTest, isReached == 0), REML=F)
model.rr.simple<-lmer(formula = AccRT ~ catDiffLevel * catRewardLevel +intervalReached +
scaledTrialSessionNum + scaledIntervalSessionNum + scaledIntervalBlockNum +
(1 | uniqueid),
data = subset(df.trialTest, isReached == 0), REML=F)
tab_model(model.rr, model.rr.simple,
title = "AccRT - Trial Based",
dv.labels = c('AccRT (Full RE)','AccRT (Simple)'),
show.re.var = TRUE, show.stat=TRUE, show.icc=FALSE, show.se = TRUE)
dfwc <- summarySEwithinO(df.trialTest, measurevar="hit",
withinvars=c("catDiffLevel","catRewardLevel","isReached"),
idvar="uniqueid", na.rm=TRUE, conf.interval=.95)
p.RR<-ggplot(dfwc, aes(x=catDiffLevel, y=hitNormed, fill=catRewardLevel)) +
geom_bar(stat="identity", color="black", position=position_dodge(.9)) +
geom_errorbar(aes(ymin=hitNormed-se, ymax=hitNormed+se), width=.2,
position=position_dodge(.9)) + coord_cartesian(ylim=c(0.88,0.93)) +
labs(x="", y = "Hit")+
facet_grid(.~isReached) +
theme_classic() + theme(text = element_text(size=20),
axis.text.y = element_text(size=10),
legend.position = 'top') +
scale_fill_brewer(palette="Set1") +
guides(fill=guide_legend(title="isReached")) +
scale_y_continuous(
labels = scales::number_format(accuracy = 0.01))
p.RR
p.RR<-ggplot(dfwc, aes(x=isReached, y=hitNormed, fill=catRewardLevel)) +
geom_bar(stat="identity", color="black", position=position_dodge(.9)) +
geom_errorbar(aes(ymin=hitNormed-se, ymax=hitNormed+se), width=.2,
position=position_dodge(.9)) + coord_cartesian(ylim=c(0.88,0.93)) +
labs(x="", y = "Hit")+
facet_grid(.~catDiffLevel) +
theme_classic() + theme(text = element_text(size=20),
axis.text.y = element_text(size=10),
legend.position = 'top') +
scale_fill_brewer(palette="Set1") +
guides(fill=guide_legend(title="isReached")) +
scale_y_continuous(
labels = scales::number_format(accuracy = 0.01))
p.RR
p.RR<-ggplot(dfwc, aes(x=isReached, y=hitNormed, fill=catRewardLevel)) +
geom_bar(stat="identity", color="black", position=position_dodge(.9)) +
geom_errorbar(aes(ymin=hitNormed-se, ymax=hitNormed+se), width=.2,
position=position_dodge(.9)) + coord_cartesian(ylim=c(0.9,0.93)) +
labs(x="", y = "Hit")+
facet_grid(.~catDiffLevel) +
theme_classic() + theme(text = element_text(size=20),
axis.text.y = element_text(size=10),
legend.position = 'top') +
scale_fill_brewer(palette="Set1") +
guides(fill=guide_legend(title="isReached")) +
scale_y_continuous(
labels = scales::number_format(accuracy = 0.01))
p.RR
df.trial_IntervalReached <- subset(df.trialTest, intervalReached == 1)
df.trial_IntervalReached <- subset(df.trialTest, intervalReached == 1)
dfwc <- summarySEwithinO(df.trial_IntervalReached, measurevar="hit",
withinvars=c("catDiffLevel","catRewardLevel","isReached"),
idvar="uniqueid", na.rm=TRUE, conf.interval=.95)
p.RR<-ggplot(dfwc, aes(x=isReached, y=hitNormed, fill=catRewardLevel)) +
geom_bar(stat="identity", color="black", position=position_dodge(.9)) +
geom_errorbar(aes(ymin=hitNormed-se, ymax=hitNormed+se), width=.2,
position=position_dodge(.9)) + coord_cartesian(ylim=c(0.9,0.93)) +
labs(x="", y = "Hit")+
facet_grid(.~catDiffLevel) +
theme_classic() + theme(text = element_text(size=20),
axis.text.y = element_text(size=10),
legend.position = 'top') +
scale_fill_brewer(palette="Set1") +
guides(fill=guide_legend(title="isReached")) +
scale_y_continuous(
labels = scales::number_format(accuracy = 0.01))
p.RR
p.RR<-ggplot(dfwc, aes(x=isReached, y=hitNormed, fill=catRewardLevel)) +
geom_bar(stat="identity", color="black", position=position_dodge(.9)) +
geom_errorbar(aes(ymin=hitNormed-se, ymax=hitNormed+se), width=.2,
position=position_dodge(.9)) + coord_cartesian(ylim=c(0.9,1)) +
labs(x="", y = "Hit")+
facet_grid(.~catDiffLevel) +
theme_classic() + theme(text = element_text(size=20),
axis.text.y = element_text(size=10),
legend.position = 'top') +
scale_fill_brewer(palette="Set1") +
guides(fill=guide_legend(title="isReached")) +
scale_y_continuous(
labels = scales::number_format(accuracy = 0.01))
p.RR
p.RR<-ggplot(dfwc, aes(x=isReached, y=hitNormed, fill=catRewardLevel)) +
geom_bar(stat="identity", color="black", position=position_dodge(.9)) +
geom_errorbar(aes(ymin=hitNormed-se, ymax=hitNormed+se), width=.2,
position=position_dodge(.9)) + coord_cartesian(ylim=c(0.9,0.95)) +
labs(x="", y = "Hit")+
facet_grid(.~catDiffLevel) +
theme_classic() + theme(text = element_text(size=20),
axis.text.y = element_text(size=10),
legend.position = 'top') +
scale_fill_brewer(palette="Set1") +
guides(fill=guide_legend(title="isReached")) +
scale_y_continuous(
labels = scales::number_format(accuracy = 0.01))
p.RR
model.rr<-glmer(formula = hit ~ scaledDGoal * catDiffLevel * catRewardLevel  +
scaledTrialSessionNum + scaledIntervalSessionNum + scaledIntervalBlockNum +
(1 + catDiffLevel + scaledDGoal + catRewardLevel| uniqueid),
data = subset(df.trialTest, intervalReached == 1), family = "binomial")
