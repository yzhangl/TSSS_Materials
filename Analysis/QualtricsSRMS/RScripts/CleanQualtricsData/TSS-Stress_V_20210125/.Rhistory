# import data
#set version
curVersion="TSS-Stress_20201122"
curDate=Sys.Date()
path.raw.data= "../../../../../Data/QualtricsSRMS/TSS-Stress_20201122/RawData/TSS-Stress-SRMS_December+2,+2020_17.54.csv"
path.clean.data = paste0("../../../../../Data/QualtricsSRMS/",curVersion,"/CleanedData/TSS-Stress_SRMS_Clean_Version_",curVersion,"_Date_",curDate,".csv", sep = "")
ProlificLogPath=paste0("../../../../../Participants/",curVersion,"/Prolific/")
SONA_PAYLogPath=paste0("../../../../../Participants/",curVersion,"/SONA_PAY/")
SONA_CREDITLogPath=paste0("../../../../../Participants/",curVersion,"/SONA_CREDIT/")
#import raw data
data.raw = read.csv(file = path.raw.data,header=TRUE,na.strings="")
prolificFiles = list.files(path=ProlificLogPath, pattern="*.csv", full.names=TRUE)
data.prolific = ldply(prolificFiles, read_csv)
Sona_PayFiles = list.files(path=SONA_PAYLogPath, pattern="*.csv", full.names=TRUE)
data.SonaPay = ldply(Sona_PayFiles, read_csv)
Sona_CreditFiles = list.files(path=SONA_CREDITLogPath, pattern="*.csv", full.names=TRUE)
data.SonaCredit = ldply(Sona_CreditFiles, read_csv)
#data.Error = read.csv(file = ErrorLogPath,header=TRUE,na.strings="NaN")
View(data.prolific)
if(length(data.SonaCredit!=0))(
data.Sona.filter<- data.Sona %>%
dplyr::select(survey_id,credit_type)%>%
dplyr::filter(credit_type=="Participated")%>%
dplyr::select(survey_id)%>%
distinct(participant_id)
)
if(length(data.SonaPay!=0))(
data.SonaPay.filter<- data.SonaPay %>%
#dplyr::select(survey_id,credit_type)%>%
dplyr::filter(credit_type=="Participated")%>%
#dplyr::select(survey_id)%>%
distinct(survey_id)%>%
rename(SubID=survey_id)
)
if(length(data.prolific!=0))(
data.prolific.filter<- data.prolific %>%
dplyr::select(participant_id,status)%>%
dplyr::filter(status=="APPROVED")%>%
dplyr::select(participant_id)%>%
distinct(participant_id)%>%
rename(SubID=participant_id)
)
data.Independent<- data.raw%>%
filter(PLATFORM=="INDEPENDENT")%>%
select(INDEPENDENT_PID)%>%
distinct(INDEPENDENT_PID)%>%
rename(SubID=INDEPENDENT_PID)
data.SubjectListCombined<- data.prolific.filter
#data.SubjectListCombined<- join(data.prolific.filter, data.SonaPay.filter,type= "full")
#data.SubjectListCombined<- join(data.SubjectListCombined,data.Independent,type= "full")
# set the Working Directory and paths
here()
# set seed
set.seed(42)
# set directory
setwd(here())
# import data
#set version
curVersion="TSS-Stress_20201122"
curDate=Sys.Date()
path.raw.data= "../../../../../Data/QualtricsSRMS/TSS-Stress_20201122/RawData/TSS-Stress-SRMS_December+2,+2020_17.54.csv"
path.clean.data = paste0("../../../../../Data/QualtricsSRMS/",curVersion,"/CleanedData/TSS-Stress_SRMS_Clean_Version_",curVersion,"_Date_",curDate,".csv", sep = "")
ProlificLogPath=paste0("../../../../../Participants/",curVersion,"/Prolific/")
SONA_PAYLogPath=paste0("../../../../../Participants/",curVersion,"/SONA_PAY/")
SONA_CREDITLogPath=paste0("../../../../../Participants/",curVersion,"/SONA_CREDIT/")
#import raw data
data.raw = read.csv(file = path.raw.data,header=TRUE,na.strings="")
prolificFiles = list.files(path=ProlificLogPath, pattern="*.csv", full.names=TRUE)
data.prolific = ldply(prolificFiles, read_csv)
Sona_PayFiles = list.files(path=SONA_PAYLogPath, pattern="*.csv", full.names=TRUE)
data.SonaPay = ldply(Sona_PayFiles, read_csv)
Sona_CreditFiles = list.files(path=SONA_CREDITLogPath, pattern="*.csv", full.names=TRUE)
data.SonaCredit = ldply(Sona_CreditFiles, read_csv)
#data.Error = read.csv(file = ErrorLogPath,header=TRUE,na.strings="NaN")
if(length(data.SonaCredit!=0))(
data.Sona.filter<- data.Sona %>%
dplyr::select(survey_id,credit_type)%>%
dplyr::filter(credit_type=="Participated")%>%
dplyr::select(survey_id)%>%
distinct(participant_id)
)
if(length(data.SonaPay!=0))(
data.SonaPay.filter<- data.SonaPay %>%
#dplyr::select(survey_id,credit_type)%>%
dplyr::filter(credit_type=="Participated")%>%
#dplyr::select(survey_id)%>%
distinct(survey_id)%>%
rename(SubID=survey_id)
)
if(length(data.prolific!=0))(
data.prolific.filter<- data.prolific %>%
dplyr::select(participant_id,status)%>%
dplyr::filter(status=="APPROVED")%>%
dplyr::select(participant_id)%>%
distinct(participant_id)%>%
rename(SubID=participant_id)
)
data.Independent<- data.raw%>%
filter(PLATFORM=="INDEPENDENT")%>%
select(INDEPENDENT_PID)%>%
distinct(INDEPENDENT_PID)%>%
rename(SubID=INDEPENDENT_PID)
data.SubjectListCombined<- data.prolific.filter
#data.SubjectListCombined<- join(data.prolific.filter, data.SonaPay.filter,type= "full")
#data.SubjectListCombined<- join(data.SubjectListCombined,data.Independent,type= "full")
View(data.prolific.filter)
data.filter<- data.raw %>%
dplyr::filter(Version==curVersion)#%>%
# dplyr::filter(PROLIFIC_PID %in%data.Error$PROLIFIC_PID)
# data.filter<- data.filter %>%
#   dplyr::mutate(SubID=case_when(
#     !is.na(INDEPENDENT_PID)~INDEPENDENT_PID,
#     !is.na(PROLIFIC_PID)~PROLIFIC_PID,
#     !is.na(SONA_PID)~SONA_PID,
#
#     )
#   )
data.filter<-data.filter %>% dplyr::mutate(SubID=coalesce(INDEPENDENT_PID,PROLIFIC_PID,SONA_PID))
data.filter<- data.filter %>%
dplyr::filter(SubID %in%data.SubjectListCombined$SubID )
data.duration<- data.filter %>%
dplyr::select(SubID,PLATFORM, starts_with("Duration")) %>%
dplyr::mutate_at(vars(starts_with("Duration")),as.character)%>%
dplyr::mutate_at(vars(starts_with("Duration")),as.numeric)%>%
dplyr::mutate(durationSRMS= ((Duration..in.seconds.)/60))
data.durationSONA<- data.filter %>%
dplyr::select(SubID,PLATFORM, starts_with("Duration")) %>%
dplyr::filter(PLATFORM=="SONA_PAY")%>%
dplyr::mutate_at(vars(starts_with("Duration")),as.character)%>%
dplyr::mutate_at(vars(starts_with("Duration")),as.numeric)%>%
dplyr::mutate(durationSRMS= ((Duration..in.seconds.)/60))
data.durationProlific<- data.filter %>%
dplyr::select(SubID,PLATFORM, starts_with("Duration")) %>%
dplyr::filter(PLATFORM=="PROLIFIC")%>%
dplyr::mutate_at(vars(starts_with("Duration")),as.character)%>%
dplyr::mutate_at(vars(starts_with("Duration")),as.numeric)%>%
dplyr::mutate(durationSRMS= ((Duration..in.seconds.)/60))
#select Questions about eligibility
data.Eligibility=data.filter %>%
dplyr::select(SubID,PLATFORM, Q25, Q27, Q31, Q29, Q33) %>%
dplyr::mutate_all(as.character) %>%
replace(.=="Normal Vision",0)%>%
replace(.=="Corrected Vision", 0)%>%
replace(.=="Non Corrected Vision", 1)%>%
replace(.=="No, but I am fluent", .5)%>%
dplyr::mutate(Q25 = replace(Q25, which(Q25 == "Yes"), 0))%>%
dplyr::mutate(Q25 = replace(Q25, which(Q25 == "No"), 1))%>%
dplyr::mutate(Q27 = replace(Q27, which(Q27 == "Yes"), 1))%>%
dplyr::mutate(Q27 = replace(Q27, which(Q27 == "No"), 0))%>%
dplyr::mutate(Q31 = replace(Q31, which(Q31 == "Yes"), 0))%>%
dplyr::mutate(Q31 = replace(Q31, which(Q31 == "No"), 1))%>%
dplyr::mutate_at(vars(starts_with("Q2")),as.numeric)%>% # turn into the data type into numeric
replace(.=="Prefer not to respond",NA)
#rename Questions about eligibility
data.Eligibility<-data.Eligibility %>%
dplyr::rename(Elig_ColorBlindness=Q25,
Elig_Dyslexic=Q27,
Elig_NormalVision=Q29,
Elig_NativeEnglish=Q31,
Elig_YearsInUS=Q33)
data.Demographic=data.filter %>%
dplyr::select(SubID,PLATFORM,Q11,Q13,Q15,Q17,Q19,Q21,Q23)
data.Demographic<-data.Demographic %>%
dplyr::rename(Dem_Age=Q11,
Dem_Sex=Q13,
Dem_Gender=Q15,
Dem_GenderOther=Q17,
Dem_Ethnicity=Q19,
Dem_EthDesc=Q21,
Dem_Hispanic=Q23)
max_code=5
# Extract STAI items and reverse code
data.STAI=data.filter %>%
dplyr::select(SubID,PLATFORM,starts_with("STAI_"))%>%
dplyr::mutate_all(as.character) %>%
replace(.=="Almost Never",1)%>%
replace(.=="Sometimes",2)%>%
replace(.=="Often",3) %>%
replace(.=="Almost Always",4) %>%
replace(.=="Prefer not to answer",NA) %>%
dplyr::mutate_at(vars(-SubID,-PLATFORM), as.numeric) %>%
mutate_at(.vars = vars(STAI_Y2_1,STAI_Y2_3,STAI_Y2_6,STAI_Y2_7,STAI_Y2_10,STAI_Y2_13,STAI_Y2_14,STAI_Y2_16,STAI_Y2_19), .funs = list(~max_code-.))  # this line does the reverse coding
data.DASS=data.filter %>%
dplyr::select(SubID, PLATFORM,starts_with("DASS_")) %>%
dplyr::mutate_all(as.character) %>%
replace(.=="Did not apply to me at all",0) %>%
replace(.=="Applied to me to some degree, or some of the time",1) %>%
replace(.=="Applied to me to a considerable degree, or a good part of time",2) %>%
replace(.=="Applied to me very much, or most of the time",3) %>%
replace(.=="Prefer not to answer",NA) %>%
dplyr::mutate_at(vars(-SubID,-PLATFORM), as.numeric)
# recode data
data.COVID19IS=data.filter %>%
dplyr::select(SubID,PLATFORM,Q45,Q47,Q49,Q51,Q53,Q55,Q57,Q59) %>%
dplyr::mutate_all(as.character) %>%
replace(.=="Prefer not to answer",NA)%>%
replace(.=="No change", 0)%>%
mutate_all(funs(str_replace_all(., "[\r\n]", "")))%>%
mutate_all(funs(str_replace(., ".*Severe.*", "3")))%>%
mutate_all(funs(str_replace(., ".*Moderate.*", "2")))%>%
mutate_all(funs(str_replace(., ".*Mild.*", "1")))%>%
mutate_all(funs(str_replace(., ".*No Change.*", "0")))
#merge all of the cleaned data files
data.cleanSRMS <-data.duration %>%
join(data.Eligibility,by=c("SubID","PLATFORM") ) %>%
join(data.Demographic,by=c("SubID","PLATFORM") ) %>%
join(data.DASS,by=c("SubID","PLATFORM") ) %>%
join(data.STAI,by=c("SubID","PLATFORM") ) %>%
join(data.COVID19IS,by=c("SubID","PLATFORM") )
write.csv(data.cleanSRMS,path.clean.data, row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
#Clear environemnt and Load Packages
# clear the environment
rm(list=ls())
#detach("package:here", unload = TRUE)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
plyr,  # For join function
tidyverse, #for dyplr functions
here # for setting path and working directory
)
# set the Working Directory and paths
here()
# set seed
set.seed(42)
# set directory
setwd(here())
# import data
#set version
curVersion="TSS-Stress_20201122"
curDate=Sys.Date()
path.raw.data= "../../../../../Data/QualtricsSRMS/TSS-Stress_20201122/RawData/TSS-Stress-Debrief_December+2,+2020_17.56.csv"
path.clean.data = paste0("../../../../../Data/QualtricsSRMS/",curVersion,"/CleanedData/TSS-Stress_Debrief_Clean_Version_",curVersion,"_Date_",curDate,".csv", sep = "")
ProlificLogPath=paste0("../../../../../Participants/",curVersion,"/Prolific/")
SONA_PAYLogPath=paste0("../../../../../Participants/",curVersion,"/SONA_PAY/")
SONA_CREDITLogPath=paste0("../../../../../Participants/",curVersion,"/SONA_CREDIT/")
#import raw data
data.raw = read.csv(file = path.raw.data,header=TRUE,na.strings="")
prolificFiles = list.files(path=ProlificLogPath, pattern="*.csv", full.names=TRUE)
data.prolific = ldply(prolificFiles, read_csv)
Sona_PayFiles = list.files(path=SONA_PAYLogPath, pattern="*.csv", full.names=TRUE)
data.SonaPay = ldply(Sona_PayFiles, read_csv)
Sona_CreditFiles = list.files(path=SONA_CREDITLogPath, pattern="*.csv", full.names=TRUE)
data.SonaCredit = ldply(Sona_CreditFiles, read_csv)
#data.Error = read.csv(file = ErrorLogPath,header=TRUE,na.strings="NaN")
if(length(data.SonaCredit!=0))(
data.Sona.filter<- data.Sona %>%
dplyr::select(survey_id,credit_type)%>%
dplyr::filter(credit_type=="Participated")%>%
dplyr::select(survey_id)%>%
distinct(participant_id)
)
if(length(data.SonaPay!=0))(
data.SonaPay.filter<- data.SonaPay %>%
#dplyr::select(survey_id,credit_type)%>%
dplyr::filter(credit_type=="Participated")%>%
#dplyr::select(survey_id)%>%
distinct(survey_id)%>%
rename(SubID=survey_id)
)
if(length(data.prolific!=0))(
data.prolific.filter<- data.prolific %>%
dplyr::select(participant_id,status)%>%
dplyr::filter(status=="APPROVED")%>%
dplyr::select(participant_id)%>%
distinct(participant_id)%>%
rename(SubID=participant_id)
)
# data.Independent<- data.raw%>%
#   filter(PLATFORM=="INDEPENDENT")%>%
#   select(INDEPENDENT_PID)%>%
#   distinct(INDEPENDENT_PID)%>%
#     rename(SubID=INDEPENDENT_PID)
data.SubjectListCombined<- data.prolific.filter
#data.SubjectListCombined<- join(data.prolific.filter, data.SonaPay.filter,type= "full")
#data.SubjectListCombined<- join(data.SubjectListCombined,data.Independent,type= "full")
data.filter<- data.raw %>%
dplyr::filter(AssignmentID==curVersion)#%>%
# dplyr::filter(PROLIFIC_PID %in%data.Error$PROLIFIC_PID)
data.filter<- data.filter %>%
# dplyr::filter(workerId %in%data.prolific.filter$participant_id |SubID %in%data.Sona.filter$survey_id )
dplyr::filter(WorkerID %in%data.SubjectListCombined$SubID )
data.Embedded=data.filter %>%
dplyr::select(WorkerID,PLATFORM,bP,order)
# recode data
data.EasyCue=data.filter %>%
dplyr::select(WorkerID,PLATFORM,starts_with("Composite_Collector_PosLPenL"))%>% # select the variables you would like to work with (Always ID)
dplyr::mutate_all(as.character)%>% # turn into the data type into character
replace(.=="-5  Not at all" ,-5)%>% #replace and recode
replace(.=="-5  unpleasant/negative" ,-5)%>%
replace(.=="-5  relaxed/calm" ,-5)%>%
replace(.=="-4",-4)%>%
replace(.=="-3",-3)%>%
replace(.=="-2",-2)%>%
replace(.=="-1",-1)%>%
replace(.=="0  Neutral",0)%>%
replace(.=="1",1)%>%
replace(.=="2",2)%>%
replace(.=="3",3)%>%
replace(.=="4",4)%>%
replace(.=="5  A lot" ,5)%>%
replace(.=="5 pleasant/positive"  ,5)%>%
replace(.=="5  stimulated/aroused",5)%>%
dplyr::mutate_at(vars(starts_with("Composite_Collector_PosLPenL_")),as.numeric)%>% # turn into the data type into numeric
replace(.=="Prefer not to respond",NA)
# rename variables to informative name
data.EasyCue<-data.EasyCue %>%
rename(Easy_Like= Composite_Collector_PosLPenL_7, #7
Easy_Pleasant= Composite_Collector_PosLPenL_1, #1
Easy_Arousal= Composite_Collector_PosLPenL_2, #2
Easy_Motivation= Composite_Collector_PosLPenL_3, #3
Easy_Difficult= Composite_Collector_PosLPenL_4, #4
Easy_Effort= Composite_Collector_PosLPenL_5, #5
Easy_Attention= Composite_Collector_PosLPenL_6) #6
# recode data
data.HardCue=data.filter %>%
dplyr::select(WorkerID,PLATFORM,starts_with("Composite_Collector_PosLPenH_"))%>% # select the variables you would like to work with (Always ID)
dplyr::mutate_all(as.character)%>% # turn into the data type into character
replace(.=="-5  Not at all" ,-5)%>% #replace and recode
replace(.=="-5  unpleasant/negative" ,-5)%>%
replace(.=="-5  relaxed/calm" ,-5)%>%
replace(.=="-4",-4)%>%
replace(.=="-3",-3)%>%
replace(.=="-2",-2)%>%
replace(.=="-1",-1)%>%
replace(.=="0  Neutral",0)%>%
replace(.=="1",1)%>%
replace(.=="2",2)%>%
replace(.=="3",3)%>%
replace(.=="4",4)%>%
replace(.=="5  A lot" ,5)%>%
replace(.=="5 pleasant/positive"  ,5)%>%
replace(.=="5  stimulated/aroused",5)%>%
dplyr::mutate_at(vars(starts_with("Composite_Collector_PosLPenH_")),as.numeric)%>% # turn into the data type into numeric
replace(.=="Prefer not to respond",NA)
# rename variables to informative name
data.HardCue<-data.HardCue %>%
rename(Hard_Like= Composite_Collector_PosLPenH_7, #7
Hard_Pleasant= Composite_Collector_PosLPenH_1, #1
Hard_Arousal= Composite_Collector_PosLPenH_2, #2
Hard_Motivation= Composite_Collector_PosLPenH_3, #3
Hard_Difficult= Composite_Collector_PosLPenH_4, #4
Hard_Effort= Composite_Collector_PosLPenH_5, #5
Hard_Attention= Composite_Collector_PosLPenH_6) #6
# recode data
data.EasyReachedFB=data.filter %>%
dplyr::select(WorkerID,PLATFORM,Q261_15_1,Q261_15_2,Q261_15_3,Q261_15_4)%>% # select the variables you would like to work with (Always ID)
dplyr::mutate_all(as.character)%>% # turn into the data type into character
replace(.=="-5  Not at all" ,-5)%>% #replace and recode
replace(.=="-4",-4)%>%
replace(.=="-3",-3)%>%
replace(.=="-2",-2)%>%
replace(.=="-1",-1)%>%
replace(.=="0  Neutral",0)%>%
replace(.=="1",1)%>%
replace(.=="2",2)%>%
replace(.=="3",3)%>%
replace(.=="4",4)%>%
replace(.=="5  A lot" ,5)%>%
dplyr::mutate_at(vars(starts_with("Q261_15_")),as.numeric)%>% # turn into the data type into numeric
replace(.=="Prefer not to respond",NA)
# rename variables to informative name
data.EasyReachedFB <-data.EasyReachedFB %>%
rename(EasyReachedFB_Like=Q261_15_4,
EasyReachedFB_Motivation= Q261_15_1,
EasyReachedFB_Difficult= Q261_15_2,
EasyReachedFB_Attention= Q261_15_3)
# recode data
data.EasyFailedFB=data.filter %>%
dplyr::select(WorkerID,PLATFORM,Q261_14_1,Q261_14_2,Q261_14_3,Q261_14_4)%>% # select the variables you would like to work with (Always ID)
dplyr::mutate_all(as.character)%>% # turn into the data type into character
replace(.=="-5  Not at all" ,-5)%>% #replace and recode
replace(.=="-4",-4)%>%
replace(.=="-3",-3)%>%
replace(.=="-2",-2)%>%
replace(.=="-1",-1)%>%
replace(.=="0  Neutral",0)%>%
replace(.=="1",1)%>%
replace(.=="2",2)%>%
replace(.=="3",3)%>%
replace(.=="4",4)%>%
replace(.=="5  A lot" ,5)%>%
dplyr::mutate_at(vars(starts_with("Q261_14_")),as.numeric)%>% # turn into the data type into numeric
replace(.=="Prefer not to respond",NA)
# rename variables to informative name
data.EasyFailedFB <-data.EasyFailedFB %>%
rename(EasyFailedFB_Like=Q261_14_4,
EasyFailedFB_Motivation= Q261_14_1,
EasyFailedFB_Difficult= Q261_14_2,
EasyFailedFB_Attention= Q261_14_3)
# recode data
data.HardReachedFB=data.filter %>%
dplyr::select(WorkerID,PLATFORM,Q261_15_1.1,Q261_15_2.1,Q261_15_3.1,Q261_15_4.1)%>% # select the variables you would like to work with (Always ID)
dplyr::mutate_all(as.character)%>% # turn into the data type into character
replace(.=="-5  Not at all" ,-5)%>% #replace and recode
replace(.=="-4",-4)%>%
replace(.=="-3",-3)%>%
replace(.=="-2",-2)%>%
replace(.=="-1",-1)%>%
replace(.=="0  Neutral",0)%>%
replace(.=="1",1)%>%
replace(.=="2",2)%>%
replace(.=="3",3)%>%
replace(.=="4",4)%>%
replace(.=="5  A lot" ,5)%>%
dplyr::mutate_at(vars(starts_with("Q261_15_")),as.numeric)%>% # turn into the data type into numeric
replace(.=="Prefer not to respond",NA)
# rename variables to informative name
data.HardReachedFB <-data.HardReachedFB %>%
rename(HardReachedFB_Like=Q261_15_4.1,
HardReachedFB_Motivation= Q261_15_1.1,
HardReachedFB_Difficult= Q261_15_2.1,
HardReachedFB_Attention= Q261_15_3.1)
# recode data
data.HardFailedFB=data.filter %>%
dplyr::select(WorkerID,PLATFORM,Q261_14_1.1,Q261_14_2.1,Q261_14_3.1,Q261_14_4.1)%>% # select the variables you would like to work with (Always ID)
dplyr::mutate_all(as.character)%>% # turn into the data type into character
replace(.=="-5  Not at all" ,-5)%>% #replace and recode
replace(.=="-4",-4)%>%
replace(.=="-3",-3)%>%
replace(.=="-2",-2)%>%
replace(.=="-1",-1)%>%
replace(.=="0  Neutral",0)%>%
replace(.=="1",1)%>%
replace(.=="2",2)%>%
replace(.=="3",3)%>%
replace(.=="4",4)%>%
replace(.=="5  A lot" ,5)%>%
dplyr::mutate_at(vars(starts_with("Q261_14_")),as.numeric)%>% # turn into the data type into numeric
replace(.=="Prefer not to respond",NA)
# rename variables to informative name
data.HardFailedFB <-data.HardFailedFB %>%
rename(HardFailedFB_Like=Q261_14_4.1,
HardFailedFB_Motivation= Q261_14_1.1,
HardFailedFB_Difficult= Q261_14_2.1,
HardFailedFB_Attention= Q261_14_3.1)
#merge all of the cleaned data files
data.cleanDebrief <-data.Embedded %>%
join(data.EasyCue,by=c("WorkerID","PLATFORM") ) %>%
join(data.HardCue,by=c("WorkerID","PLATFORM") ) %>%
join(data.EasyReachedFB,by=c("WorkerID","PLATFORM") ) %>%
join(data.EasyFailedFB,by=c("WorkerID","PLATFORM") ) %>%
join(data.HardReachedFB,by=c("WorkerID","PLATFORM") ) %>%
join(data.HardFailedFB,by=c("WorkerID","PLATFORM") )
write.csv(data.cleanDebrief,path.clean.data, row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
#Clear environemnt and Load Packages
# clear the environment
rm(list=ls())
#detach("package:here", unload = TRUE)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
plyr,  # For join function
tidyverse, #for dyplr functions
here # for setting path and working directory
)
# set the Working Directory and paths
here()
# set seed
set.seed(42)
# set directory
setwd(here())
# import data
#set version
curVersion="TSS-Stress_20201122"
curDate=Sys.Date()
path.raw.data= "../../../../../Data/QualtricsSRMS/TSS-Stress_20201122/RawData/TSS-Stress-SRMS_January+6,+2021_11.41.csv"
path.clean.data = paste0("../../../../../Data/QualtricsSRMS/",curVersion,"/CleanedData/TSS-Stress_SRMS_Clean_Version_",curVersion,"_Date_",curDate,".csv", sep = "")
ProlificLogPath=paste0("../../../../../Participants/",curVersion,"/Prolific/")
SONA_PAYLogPath=paste0("../../../../../Participants/",curVersion,"/SONA_PAY/")
SONA_CREDITLogPath=paste0("../../../../../Participants/",curVersion,"/SONA_CREDIT/")
#import raw data
data.raw = read.csv(file = path.raw.data,header=TRUE,na.strings="")
prolificFiles = list.files(path=ProlificLogPath, pattern="*.csv", full.names=TRUE)
data.prolific = ldply(prolificFiles, read_csv)
Sona_PayFiles = list.files(path=SONA_PAYLogPath, pattern="*.csv", full.names=TRUE)
data.SonaPay = ldply(Sona_PayFiles, read_csv)
Sona_CreditFiles = list.files(path=SONA_CREDITLogPath, pattern="*.csv", full.names=TRUE)
data.SonaCredit = ldply(Sona_CreditFiles, read_csv)
#data.Error = read.csv(file = ErrorLogPath,header=TRUE,na.strings="NaN")
if(length(data.SonaCredit!=0))(
data.Sona.filter<- data.Sona %>%
dplyr::select(survey_id,credit_type)%>%
dplyr::filter(credit_type=="Participated")%>%
dplyr::select(survey_id)%>%
distinct(participant_id)
)
if(length(data.SonaPay!=0))(
data.SonaPay.filter<- data.SonaPay %>%
#dplyr::select(survey_id,credit_type)%>%
dplyr::filter(credit_type=="Participated")%>%
#dplyr::select(survey_id)%>%
distinct(survey_id)%>%
rename(SubID=survey_id)
)
if(length(data.prolific!=0))(
data.prolific.filter<- data.prolific %>%
dplyr::select(participant_id,status)%>%
dplyr::filter(status=="APPROVED")%>%
dplyr::select(participant_id)%>%
distinct(participant_id)%>%
rename(SubID=participant_id)
)
data.Independent<- data.raw%>%
filter(PLATFORM=="INDEPENDENT")%>%
select(INDEPENDENT_PID)%>%
distinct(INDEPENDENT_PID)%>%
rename(SubID=INDEPENDENT_PID)
data.SubjectListCombined<- data.prolific.filter
#data.SubjectListCombined<- join(data.prolific.filter, data.SonaPay.filter,type= "full")
#data.SubjectListCombined<- join(data.SubjectListCombined,data.Independent,type= "full")
View(data.prolific)
